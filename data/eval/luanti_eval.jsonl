{"instruction": "Register a basic node called 'goops_scraps' with description 'Allows to recycle metal tools'", "input": "", "output": "minetest.register_node('mymod:goops_scraps', {\n    description = 'Allows to recycle metal tools',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Create a light-emitting node 'good_morning_cr' with light level 3", "input": "", "output": "minetest.register_node('mymod:good_morning_cr', {\n    description = 'A simple yet quirky texture pack by Louis Durrant',\n    tiles = {'default_torch.png'},\n    light_source = 11\n})", "family": "scaffold"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Register a basic node called 'make_sense' with description 'Adds missing crafting recipes that should exist'", "input": "", "output": "minetest.register_node('mymod:make_sense', {\n    description = 'Adds missing crafting recipes that should exist',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Register a tool called 'formspec_editor' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:formspec_editor', {\n    description = 'A Realtime in-game formspec viewer/editor',\n    inventory_image = 'formspec_editor.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Register a basic node called 'axistools' with description 'All the functionality of tinkers construct, but al'", "input": "", "output": "minetest.register_node('mymod:axistools', {\n    description = 'All the functionality of tinkers construct, but al',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Register a basic node called 'more_up_packs' with description 'Upgrade your upgrade packs so you can have even hi'", "input": "", "output": "minetest.register_node('mymod:more_up_packs', {\n    description = 'Upgrade your upgrade packs so you can have even hi',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Register a basic node called 'hud_timers' with description 'A lightweight library for adding hud timers.'", "input": "", "output": "minetest.register_node('mymod:hud_timers', {\n    description = 'A lightweight library for adding hud timers.',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Register a basic node called 'railgun' with description ' Colorable railgun using raycast and particles '", "input": "", "output": "minetest.register_node('mymod:railgun', {\n    description = ' Colorable railgun using raycast and particles ',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Register a tool called 'an_televator' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:an_televator', {\n    description = 'Simple lag-free teleporting elevators.',\n    inventory_image = 'an_televator.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Register a tool called 'craft_table' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:craft_table', {\n    description = 'Add Craft Table',\n    inventory_image = 'craft_table.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Register a basic node called 'tidesandfloods' with description '[WIP] [Warning: read full description] Adds the /s'", "input": "", "output": "minetest.register_node('mymod:tidesandfloods', {\n    description = '[WIP] [Warning: read full description] Adds the /s',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Register a basic node called 'simple_skins' with description 'Allows players to set their individual skins from '", "input": "", "output": "minetest.register_node('mymod:simple_skins', {\n    description = 'Allows players to set their individual skins from ',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Create a light-emitting node 'random_messages' with light level 3", "input": "", "output": "minetest.register_node('mymod:random_messages', {\n    description = 'Register random announcements',\n    tiles = {'default_torch.png'},\n    light_source = 3\n})", "family": "scaffold"}
{"instruction": "Register a tool called 'weedstone' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:weedstone', {\n    description = 'Originally meant to be a simple electronics type m',\n    inventory_image = 'weedstone.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Register a basic node called 'go' with description 'A game of Go'", "input": "", "output": "minetest.register_node('mymod:go', {\n    description = 'A game of Go',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Register a tool called 'asrs' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:asrs', {\n    description = 'Adds an automated storage and retrieval system to ',\n    inventory_image = 'asrs.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Register a tool called 'guns4dworkbench' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:guns4dworkbench', {\n    description = 'Craft guns and their components with an added work',\n    inventory_image = 'guns4dworkbench.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Register a tool called 'stellua' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:stellua', {\n    description = 'A sandbox game about exploring alien planets and b',\n    inventory_image = 'stellua.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Create a light-emitting node 'aephorus' with light level 7", "input": "", "output": "minetest.register_node('mymod:aephorus', {\n    description = 'Simple, pixelish, cartoonish and vibrant texture p',\n    tiles = {'default_torch.png'},\n    light_source = 7\n})", "family": "scaffold"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Register a tool called 'livingnether' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:livingnether', {\n    description = 'Adds various creatures to your Nether.',\n    inventory_image = 'livingnether.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
