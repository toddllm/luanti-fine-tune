{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Register a basic node called 'mcl_lever_statu' with description 'Makes levers in the \u201con\u201d position have a red tip i'", "input": "", "output": "minetest.register_node('mymod:mcl_lever_statu', {\n    description = 'Makes levers in the \u201con\u201d position have a red tip i',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Register a tool called 'first_person_sh' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:first_person_sh', {\n    description = 'Adds sprite-based guns with animations (warning: m',\n    inventory_image = 'first_person_sh.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Register a basic node called 'adv_lightsabers' with description 'Relatively Advanced Lightsabers for Minetest Game.'", "input": "", "output": "minetest.register_node('mymod:adv_lightsabers', {\n    description = 'Relatively Advanced Lightsabers for Minetest Game.',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Register a basic node called 'meseport' with description 'Allows for the creation of Meseportation systems.'", "input": "", "output": "minetest.register_node('mymod:meseport', {\n    description = 'Allows for the creation of Meseportation systems.',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Create a light-emitting node 'xnether' with light level 14", "input": "", "output": "minetest.register_node('mymod:xnether', {\n    description = 'Adds trees, grass and ores to PilzAdam's Nether',\n    tiles = {'default_torch.png'},\n    light_source = 7\n})", "family": "scaffold"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Register a tool called 'bloopy1_ctf_pac' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:bloopy1_ctf_pac', {\n    description = 'A texture pack made by bloopy1 for ctf',\n    inventory_image = 'bloopy1_ctf_pac.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Create a light-emitting node 'batch_screwdriv' with light level 11", "input": "", "output": "minetest.register_node('mymod:batch_screwdriv', {\n    description = 'With this you can rotate all nodes in a row at onc',\n    tiles = {'default_torch.png'},\n    light_source = 11\n})", "family": "scaffold"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Create a light-emitting node 'watershed' with light level 14", "input": "", "output": "minetest.register_node('mymod:watershed', {\n    description = 'A river / mountain range mapgen',\n    tiles = {'default_torch.png'},\n    light_source = 11\n})", "family": "scaffold"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Create a light-emitting node 'dungeon_loot_ch' with light level 14", "input": "", "output": "minetest.register_node('mymod:dungeon_loot_ch', {\n    description = 'Adds loot chests, a command to prevent spawning lo',\n    tiles = {'default_torch.png'},\n    light_source = 3\n})", "family": "scaffold"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Create a light-emitting node 'i3' with light level 14", "input": "", "output": "minetest.register_node('mymod:i3', {\n    description = 'A next-generation inventory',\n    tiles = {'default_torch.png'},\n    light_source = 14\n})", "family": "scaffold"}
{"instruction": "Register a basic node called 'swamplified' with description 'This mod adds a few more nice touches to Atlante's'", "input": "", "output": "minetest.register_node('mymod:swamplified', {\n    description = 'This mod adds a few more nice touches to Atlante's',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Register a basic node called 'realcompass' with description 'A simple compass that only points north.'", "input": "", "output": "minetest.register_node('mymod:realcompass', {\n    description = 'A simple compass that only points north.',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Register a tool called 'spdlimit' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:spdlimit', {\n    description = 'speed limit signs for the map project Metrotest',\n    inventory_image = 'spdlimit.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Register a tool called 'mtt' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:mtt', {\n    description = 'Provides an api to register test functions for int',\n    inventory_image = 'mtt.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Register a tool called 'end_him_rightly' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:end_him_rightly', {\n    description = 'Unscrewable and throwable pommel',\n    inventory_image = 'end_him_rightly.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Register a basic node called 'jelys_pizzaria' with description 'Adds Pizza as an Endgame food'", "input": "", "output": "minetest.register_node('mymod:jelys_pizzaria', {\n    description = 'Adds Pizza as an Endgame food',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Create a light-emitting node 'online_craftgui' with light level 7", "input": "", "output": "minetest.register_node('mymod:online_craftgui', {\n    description = 'Generates a static craftguide website',\n    tiles = {'default_torch.png'},\n    light_source = 7\n})", "family": "scaffold"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Register a basic node called 'mcl_speedrun' with description 'Speedrun features for MineClone2'", "input": "", "output": "minetest.register_node('mymod:mcl_speedrun', {\n    description = 'Speedrun features for MineClone2',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Register a tool called 'texgen' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:texgen', {\n    description = 'Dynamically generated texture packs',\n    inventory_image = 'texgen.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Register a basic node called 'worldeditadditi' with description 'Extra tools and commands to extend WorldEdit. Curr'", "input": "", "output": "minetest.register_node('mymod:worldeditadditi', {\n    description = 'Extra tools and commands to extend WorldEdit. Curr',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Register a tool called 'halloween' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:halloween', {\n    description = 'Adds Halloween candy and costumes.',\n    inventory_image = 'halloween.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Register a basic node called 'cinematic_zoom' with description 'Replaces the built-in zooming feature with a cool,'", "input": "", "output": "minetest.register_node('mymod:cinematic_zoom', {\n    description = 'Replaces the built-in zooming feature with a cool,',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Create a light-emitting node 'nextgen_tinted_' with light level 11", "input": "", "output": "minetest.register_node('mymod:nextgen_tinted_', {\n    description = 'Adds tinted glass that doesn't allow light to pass',\n    tiles = {'default_torch.png'},\n    light_source = 7\n})", "family": "scaffold"}
{"instruction": "Register a tool called 'clothing' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:clothing', {\n    description = 'Add clothes to game, based on clothing from stu. F',\n    inventory_image = 'clothing.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Register a tool called 'canonical_name' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:canonical_name', {\n    description = 'api to get the proper capitalization of a name',\n    inventory_image = 'canonical_name.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Create a light-emitting node 'openion_gloston' with light level 14", "input": "", "output": "minetest.register_node('mymod:openion_gloston', {\n    description = 'Adds basic glostone-based building materials',\n    tiles = {'default_torch.png'},\n    light_source = 11\n})", "family": "scaffold"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Register a tool called 'unified_invento' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:unified_invento', {\n    description = 'Extends Unified Inventory',\n    inventory_image = 'unified_invento.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Register a basic node called 'mobconf' with description 'Place, remove and configure Mobs (for now: NPCs) u'", "input": "", "output": "minetest.register_node('mymod:mobconf', {\n    description = 'Place, remove and configure Mobs (for now: NPCs) u',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Register a tool called 'baby_sun' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:baby_sun', {\n    description = 'Makes the sun a cartoon shape with a baby face in ',\n    inventory_image = 'baby_sun.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Create a light-emitting node 'afk_indicator' with light level 11", "input": "", "output": "minetest.register_node('mymod:afk_indicator', {\n    description = 'API to check player AFK status',\n    tiles = {'default_torch.png'},\n    light_source = 7\n})", "family": "scaffold"}
{"instruction": "Register a basic node called 'tntrun' with description 'Players compete to be the last one standing on a l'", "input": "", "output": "minetest.register_node('mymod:tntrun', {\n    description = 'Players compete to be the last one standing on a l',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Register a tool called 'gravitygun' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:gravitygun', {\n    description = 'Gravitygun',\n    inventory_image = 'gravitygun.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Create a light-emitting node 'mobs_mime' with light level 3", "input": "", "output": "minetest.register_node('mymod:mobs_mime', {\n    description = 'adds a monster mimicking its surrounding nodes.',\n    tiles = {'default_torch.png'},\n    light_source = 11\n})", "family": "scaffold"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Register a basic node called 'time_travel' with description 'Adds in a craftable time machine that can be used '", "input": "", "output": "minetest.register_node('mymod:time_travel', {\n    description = 'Adds in a craftable time machine that can be used ',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Create a light-emitting node 'phonograph_albu' with light level 14", "input": "", "output": "minetest.register_node('mymod:phonograph_albu', {\n    description = 'Songs composed by Diarmuid',\n    tiles = {'default_torch.png'},\n    light_source = 7\n})", "family": "scaffold"}
{"instruction": "Register a basic node called 'quarry_link' with description 'Enables use of Quarry Mechanics with the stone-lik'", "input": "", "output": "minetest.register_node('mymod:quarry_link', {\n    description = 'Enables use of Quarry Mechanics with the stone-lik',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Create a light-emitting node 'mosscarpets' with light level 3", "input": "", "output": "minetest.register_node('mymod:mosscarpets', {\n    description = 'Moss carpets based on Ethereal mosses',\n    tiles = {'default_torch.png'},\n    light_source = 3\n})", "family": "scaffold"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Register a tool called 'hades_biofuel' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:hades_biofuel', {\n    description = 'Produce biofuel from unused plants. ',\n    inventory_image = 'hades_biofuel.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Register a basic node called 'livingfloatland' with description 'Adds various prehistoric animals to your Floatland'", "input": "", "output": "minetest.register_node('mymod:livingfloatland', {\n    description = 'Adds various prehistoric animals to your Floatland',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Register a tool called 'superflat' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:superflat', {\n    description = '(Yet Another) Superflat Map Generator: Customize w',\n    inventory_image = 'superflat.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Register a basic node called 'bloopy1_ctf_pac' with description 'A texture pack made by bloopy1 for ctf'", "input": "", "output": "minetest.register_node('mymod:bloopy1_ctf_pac', {\n    description = 'A texture pack made by bloopy1 for ctf',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Register a tool called 'lwscratch' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:lwscratch', {\n    description = 'Scratch programmable robots.',\n    inventory_image = 'lwscratch.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Register a tool called 'wintercore_vibr' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:wintercore_vibr', {\n    description = 'Custom Nodecore textures by Wintersknight',\n    inventory_image = 'wintercore_vibr.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Create a light-emitting node 'mtzip' with light level 14", "input": "", "output": "minetest.register_node('mymod:mtzip', {\n    description = ' zip-library',\n    tiles = {'default_torch.png'},\n    light_source = 11\n})", "family": "scaffold"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Register a basic node called 'technic_use_bat' with description 'Use energy from RE batteries in the inventory'", "input": "", "output": "minetest.register_node('mymod:technic_use_bat', {\n    description = 'Use energy from RE batteries in the inventory',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Create a light-emitting node 'void_chest' with light level 7", "input": "", "output": "minetest.register_node('mymod:void_chest', {\n    description = 'Access your belongings anywhere by using the power',\n    tiles = {'default_torch.png'},\n    light_source = 14\n})", "family": "scaffold"}
{"instruction": "Register a tool called 'trophies' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:trophies', {\n    description = 'Showcase player achievements with a personalized g',\n    inventory_image = 'trophies.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Create a light-emitting node 'logging' with light level 3", "input": "", "output": "minetest.register_node('mymod:logging', {\n    description = 'Create logging functions for mods easily',\n    tiles = {'default_torch.png'},\n    light_source = 11\n})", "family": "scaffold"}
{"instruction": "Create a light-emitting node 'stamina' with light level 11", "input": "", "output": "minetest.register_node('mymod:stamina', {\n    description = 'Adds stamina, hunger and sprinting (this fork adds',\n    tiles = {'default_torch.png'},\n    light_source = 14\n})", "family": "scaffold"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Register a tool called 'tntrun' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:tntrun', {\n    description = 'Players compete to be the last one standing on a l',\n    inventory_image = 'tntrun.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Register a tool called 'inv_inspector' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:inv_inspector', {\n    description = 'Allows you to view the inventory of the players',\n    inventory_image = 'inv_inspector.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Register a tool called 'overpowered' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:overpowered', {\n    description = 'Adds super overpowered and expensive endgame tools',\n    inventory_image = 'overpowered.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Register a basic node called 'nc_vanillapack' with description 'NodeCore's Default Textures, as a Texture Pack'", "input": "", "output": "minetest.register_node('mymod:nc_vanillapack', {\n    description = 'NodeCore's Default Textures, as a Texture Pack',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Register a tool called 'extended_protec' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:extended_protec', {\n    description = 'Extended interaction restriction rule',\n    inventory_image = 'extended_protec.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Create a light-emitting node 'repainter' with light level 14", "input": "", "output": "minetest.register_node('mymod:repainter', {\n    description = 'Add tools for editing node param2 for different co',\n    tiles = {'default_torch.png'},\n    light_source = 11\n})", "family": "scaffold"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Create a light-emitting node 'nc_sky_ultra_ha' with light level 11", "input": "", "output": "minetest.register_node('mymod:nc_sky_ultra_ha', {\n    description = 'The ultimate skyblock challenge',\n    tiles = {'default_torch.png'},\n    light_source = 11\n})", "family": "scaffold"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Create a light-emitting node 'skinsdb' with light level 3", "input": "", "output": "minetest.register_node('mymod:skinsdb', {\n    description = 'Custom player skins manager with support for 1.0 a',\n    tiles = {'default_torch.png'},\n    light_source = 3\n})", "family": "scaffold"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Register a basic node called 'blockcolor' with description 'BlockColor is a creative sandbox with only 8 color'", "input": "", "output": "minetest.register_node('mymod:blockcolor', {\n    description = 'BlockColor is a creative sandbox with only 8 color',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Register a tool called 'reject' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:reject', {\n    description = 'Simply reject all login attempts and show them a m',\n    inventory_image = 'reject.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Create a light-emitting node 'unified_stamina' with light level 3", "input": "", "output": "minetest.register_node('mymod:unified_stamina', {\n    description = 'Provides a universal API for handling different mo',\n    tiles = {'default_torch.png'},\n    light_source = 14\n})", "family": "scaffold"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Register a tool called 'useful_contrapt' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:useful_contrapt', {\n    description = 'Some useful contraptions / machines.',\n    inventory_image = 'useful_contrapt.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Create a light-emitting node 'shooter' with light level 11", "input": "", "output": "minetest.register_node('mymod:shooter', {\n    description = 'First person shooter mod.',\n    tiles = {'default_torch.png'},\n    light_source = 3\n})", "family": "scaffold"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Register a basic node called 'hl_marker' with description 'Teleportation Marker is a unique item that allows '", "input": "", "output": "minetest.register_node('mymod:hl_marker', {\n    description = 'Teleportation Marker is a unique item that allows ',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Register a tool called 'polygraph' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:polygraph', {\n    description = 'A formspec-based charting API providing a rich set',\n    inventory_image = 'polygraph.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Create a light-emitting node 'precise_jump' with light level 3", "input": "", "output": "minetest.register_node('mymod:precise_jump', {\n    description = 'Time your jumps to go higher or lower!',\n    tiles = {'default_torch.png'},\n    light_source = 7\n})", "family": "scaffold"}
{"instruction": "Register a tool called 'tower_defense' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:tower_defense', {\n    description = 'The Tanks are coming. Are you ready?',\n    inventory_image = 'tower_defense.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Register a basic node called 'prop_hunt_modpa' with description 'Transform into nodes and with a minigame.'", "input": "", "output": "minetest.register_node('mymod:prop_hunt_modpa', {\n    description = 'Transform into nodes and with a minigame.',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Register a tool called 'itemquantifierm' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:itemquantifierm', {\n    description = 'a mod for mineclone 2 which adds a comparator whic',\n    inventory_image = 'itemquantifierm.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Register a basic node called 'regrowing_fruit' with description 'Fruits on trees from various mods will regrow.'", "input": "", "output": "minetest.register_node('mymod:regrowing_fruit', {\n    description = 'Fruits on trees from various mods will regrow.',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Register a tool called 'inv_cycle' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:inv_cycle', {\n    description = 'With sneak+use, cycle rows in your inventory!',\n    inventory_image = 'inv_cycle.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Register a basic node called 'tunnelmaker' with description 'Easily create arbitrarily curved tunnels, paths, a'", "input": "", "output": "minetest.register_node('mymod:tunnelmaker', {\n    description = 'Easily create arbitrarily curved tunnels, paths, a',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Register a tool called 'regenerative_or' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:regenerative_or', {\n    description = 'Adds regenerative ores to the game, allowing playe',\n    inventory_image = 'regenerative_or.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Register a basic node called 'more_triggers' with description 'Adds more triggers for Awards'", "input": "", "output": "minetest.register_node('mymod:more_triggers', {\n    description = 'Adds more triggers for Awards',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Register a tool called 'rocks' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:rocks', {\n    description = 'Adds fun rocks to bring new life to your survival ',\n    inventory_image = 'rocks.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Create a light-emitting node 'copier' with light level 7", "input": "", "output": "minetest.register_node('mymod:copier', {\n    description = 'A tool to copy and paste nodes from a file or from',\n    tiles = {'default_torch.png'},\n    light_source = 3\n})", "family": "scaffold"}
{"instruction": "Create a light-emitting node 'wc_strata' with light level 7", "input": "", "output": "minetest.register_node('mymod:wc_strata', {\n    description = 'Exploring the NodeCore underground has never been ',\n    tiles = {'default_torch.png'},\n    light_source = 14\n})", "family": "scaffold"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Create a light-emitting node 'denseores' with light level 7", "input": "", "output": "minetest.register_node('mymod:denseores', {\n    description = 'Adds rare ores with twice the drops of their norma',\n    tiles = {'default_torch.png'},\n    light_source = 11\n})", "family": "scaffold"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Register a tool called 'computing' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:computing', {\n    description = 'Add multiple computing devices such as: Smartphone',\n    inventory_image = 'computing.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Register a basic node called 'fraktur' with description 'Adds a whole set of Fraktur type metals in the for'", "input": "", "output": "minetest.register_node('mymod:fraktur', {\n    description = 'Adds a whole set of Fraktur type metals in the for',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Register a tool called 'joke_currency' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:joke_currency', {\n    description = 'Adds a joke economy in game with controllable infl',\n    inventory_image = 'joke_currency.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Register a basic node called 'additional_grav' with description 'Adds overgrown gravel, similar to mossy cobbleston'", "input": "", "output": "minetest.register_node('mymod:additional_grav', {\n    description = 'Adds overgrown gravel, similar to mossy cobbleston',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Register a tool called 'agon' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:agon', {\n    description = 'Fight against some monsters!',\n    inventory_image = 'agon.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Register a tool called 'advtrains_info_' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:advtrains_info_', {\n    description = 'A library that uses font_api to render text outsid',\n    inventory_image = 'advtrains_info_.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Create a light-emitting node 'temp_password' with light level 14", "input": "", "output": "minetest.register_node('mymod:temp_password', {\n    description = 'Assign temporary passwords to accounts',\n    tiles = {'default_torch.png'},\n    light_source = 14\n})", "family": "scaffold"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Create a light-emitting node 'mt2d' with light level 11", "input": "", "output": "minetest.register_node('mymod:mt2d', {\n    description = 'Transforms the minetest world into 2d dimension',\n    tiles = {'default_torch.png'},\n    light_source = 11\n})", "family": "scaffold"}
{"instruction": "Register a tool called 'batch_screwdriv' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:batch_screwdriv', {\n    description = 'With this you can rotate all nodes in a row at onc',\n    inventory_image = 'batch_screwdriv.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Create a light-emitting node 'the_confluence' with light level 11", "input": "", "output": "minetest.register_node('mymod:the_confluence', {\n    description = 'A luamap example - a small (500x100x500) Island in',\n    tiles = {'default_torch.png'},\n    light_source = 14\n})", "family": "scaffold"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Register a basic node called 'biomeinfo' with description 'Simple API to get data about biomes.'", "input": "", "output": "minetest.register_node('mymod:biomeinfo', {\n    description = 'Simple API to get data about biomes.',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Register a basic node called 'mynumbers' with description 'Numbers and math signs'", "input": "", "output": "minetest.register_node('mymod:mynumbers', {\n    description = 'Numbers and math signs',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Register a basic node called 'msg_color' with description 'Add colored chat messages to your server.'", "input": "", "output": "minetest.register_node('mymod:msg_color', {\n    description = 'Add colored chat messages to your server.',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Register a basic node called 'naturalbiomes' with description 'Adds 9 new biomes'", "input": "", "output": "minetest.register_node('mymod:naturalbiomes', {\n    description = 'Adds 9 new biomes',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Create a light-emitting node 'giad' with light level 3", "input": "", "output": "minetest.register_node('mymod:giad', {\n    description = 'WIP Library for creating walking vehicles',\n    tiles = {'default_torch.png'},\n    light_source = 11\n})", "family": "scaffold"}
{"instruction": "Register a basic node called 'sedimentology' with description 'A mod that adds realistic erosion and degradation '", "input": "", "output": "minetest.register_node('mymod:sedimentology', {\n    description = 'A mod that adds realistic erosion and degradation ',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Register a basic node called 'colored_steel' with description 'Adds colored steel blocks.'", "input": "", "output": "minetest.register_node('mymod:colored_steel', {\n    description = 'Adds colored steel blocks.',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Register a basic node called 'lib_mount' with description 'API Framework for mounting objects.'", "input": "", "output": "minetest.register_node('mymod:lib_mount', {\n    description = 'API Framework for mounting objects.',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Create a light-emitting node 'table_goodies' with light level 14", "input": "", "output": "minetest.register_node('mymod:table_goodies', {\n    description = 'A small package for extra (can't live without) fun',\n    tiles = {'default_torch.png'},\n    light_source = 7\n})", "family": "scaffold"}
{"instruction": "Register a basic node called 'talkers' with description 'Adds an API to add talking NPCs with AI.'", "input": "", "output": "minetest.register_node('mymod:talkers', {\n    description = 'Adds an API to add talking NPCs with AI.',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Create a light-emitting node 'hl_marker' with light level 14", "input": "", "output": "minetest.register_node('mymod:hl_marker', {\n    description = 'Teleportation Marker is a unique item that allows ',\n    tiles = {'default_torch.png'},\n    light_source = 7\n})", "family": "scaffold"}
{"instruction": "Register a basic node called 'vl_skyblock' with description 'Skyblock for VoxeLibre'", "input": "", "output": "minetest.register_node('mymod:vl_skyblock', {\n    description = 'Skyblock for VoxeLibre',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Register a basic node called 'smoke_signals' with description 'Signal your friends, or warn your enemies!'", "input": "", "output": "minetest.register_node('mymod:smoke_signals', {\n    description = 'Signal your friends, or warn your enemies!',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Register a tool called 'stripped_tree' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:stripped_tree', {\n    description = 'Adds Stripped tree trunks.',\n    inventory_image = 'stripped_tree.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Register a tool called 'marinaramobs' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:marinaramobs', {\n    description = 'adds mobs to the marinara oceans',\n    inventory_image = 'marinaramobs.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Register a tool called 'tsalagi_letters' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:tsalagi_letters', {\n    description = 'Tsalagi Letters',\n    inventory_image = 'tsalagi_letters.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Register a basic node called 'hades_endgame' with description 'Adds various goodies to Hades Revisited, focused o'", "input": "", "output": "minetest.register_node('mymod:hades_endgame', {\n    description = 'Adds various goodies to Hades Revisited, focused o',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Register a basic node called 'poi' with description 'Mod to create or visit Points of Interest'", "input": "", "output": "minetest.register_node('mymod:poi', {\n    description = 'Mod to create or visit Points of Interest',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Create a light-emitting node 'spectator_mode' with light level 11", "input": "", "output": "minetest.register_node('mymod:spectator_mode', {\n    description = 'A mod for Minetest allowing you to watch other pla',\n    tiles = {'default_torch.png'},\n    light_source = 14\n})", "family": "scaffold"}
{"instruction": "Register a basic node called 'w_api' with description 'Adds an API to easily register custom weapons'", "input": "", "output": "minetest.register_node('mymod:w_api', {\n    description = 'Adds an API to easily register custom weapons',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Register a basic node called 'travelnet' with description 'Network of teleporter-boxes that allows easy trave'", "input": "", "output": "minetest.register_node('mymod:travelnet', {\n    description = 'Network of teleporter-boxes that allows easy trave',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Register a basic node called 'boomstick' with description 'a tool for testing the behavior of tnt'", "input": "", "output": "minetest.register_node('mymod:boomstick', {\n    description = 'a tool for testing the behavior of tnt',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Create a light-emitting node 'go' with light level 14", "input": "", "output": "minetest.register_node('mymod:go', {\n    description = 'A game of Go',\n    tiles = {'default_torch.png'},\n    light_source = 7\n})", "family": "scaffold"}
{"instruction": "Register a basic node called 'otherkin_flags' with description 'Adds a selection of Otherkin + Furry specific flag'", "input": "", "output": "minetest.register_node('mymod:otherkin_flags', {\n    description = 'Adds a selection of Otherkin + Furry specific flag',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Create a light-emitting node 'pathogen' with light level 11", "input": "", "output": "minetest.register_node('mymod:pathogen', {\n    description = 'Anables users to get a pathogen.',\n    tiles = {'default_torch.png'},\n    light_source = 11\n})", "family": "scaffold"}
{"instruction": "Register a basic node called 'cronjob' with description 'A more flexible alternative to the builtin minetes'", "input": "", "output": "minetest.register_node('mymod:cronjob', {\n    description = 'A more flexible alternative to the builtin minetes',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Create a light-emitting node 'limit_physics_m' with light level 7", "input": "", "output": "minetest.register_node('mymod:limit_physics_m', {\n    description = 'overrides monoids controlling player physics provi',\n    tiles = {'default_torch.png'},\n    light_source = 14\n})", "family": "scaffold"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Create a light-emitting node 'sus_sand' with light level 7", "input": "", "output": "minetest.register_node('mymod:sus_sand', {\n    description = 'Red isn\u2019t acting sus\u2026 Red is sus.',\n    tiles = {'default_torch.png'},\n    light_source = 11\n})", "family": "scaffold"}
{"instruction": "Register a tool called 'railbuilder' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:railbuilder', {\n    description = 'This mod allows you to plan and build tunnels and ',\n    inventory_image = 'railbuilder.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Create a light-emitting node 'moth' with light level 14", "input": "", "output": "minetest.register_node('mymod:moth', {\n    description = 'Adds moths which can send messages (from Lord of t',\n    tiles = {'default_torch.png'},\n    light_source = 7\n})", "family": "scaffold"}
{"instruction": "Register a basic node called 'autobox' with description 'Auto Collision/Selection Loading Boxes'", "input": "", "output": "minetest.register_node('mymod:autobox', {\n    description = 'Auto Collision/Selection Loading Boxes',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Register a basic node called 'bridges' with description 'bridges....and auto bridges'", "input": "", "output": "minetest.register_node('mymod:bridges', {\n    description = 'bridges....and auto bridges',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Register a basic node called 'myparkour' with description 'Nodes for making a parkour track'", "input": "", "output": "minetest.register_node('mymod:myparkour', {\n    description = 'Nodes for making a parkour track',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Register a basic node called 'pbmarks' with description 'Allows players to create a limited number of perso'", "input": "", "output": "minetest.register_node('mymod:pbmarks', {\n    description = 'Allows players to create a limited number of perso',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Register a tool called 'joke_currency' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:joke_currency', {\n    description = 'Adds a joke economy in game with controllable infl',\n    inventory_image = 'joke_currency.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Register a tool called 'ethereal_all_fa' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:ethereal_all_fa', {\n    description = 'All-faces tree block for Ethereal trees',\n    inventory_image = 'ethereal_all_fa.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Register a tool called 'nebula_combat' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:nebula_combat', {\n    description = 'A combat customizer for competitive servers: custo',\n    inventory_image = 'nebula_combat.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Create a light-emitting node 'teleporter_plat' with light level 3", "input": "", "output": "minetest.register_node('mymod:teleporter_plat', {\n    description = 'VoxeLibre Teleporter was created due to Travelnet ',\n    tiles = {'default_torch.png'},\n    light_source = 7\n})", "family": "scaffold"}
{"instruction": "Create a light-emitting node 'lightning' with light level 11", "input": "", "output": "minetest.register_node('mymod:lightning', {\n    description = 'A mod that adds thunder and lightning effects.',\n    tiles = {'default_torch.png'},\n    light_source = 7\n})", "family": "scaffold"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Register a basic node called 'x_enchanting' with description 'Adds Enchanting Mechanics and API.'", "input": "", "output": "minetest.register_node('mymod:x_enchanting', {\n    description = 'Adds Enchanting Mechanics and API.',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Create a light-emitting node 'composter' with light level 14", "input": "", "output": "minetest.register_node('mymod:composter', {\n    description = 'Adds a composter to make dirt out of your leaves.',\n    tiles = {'default_torch.png'},\n    light_source = 14\n})", "family": "scaffold"}
{"instruction": "Register a tool called 'morebricks' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:morebricks', {\n    description = 'Adds an assortment of new bricks to build with.',\n    inventory_image = 'morebricks.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Create a light-emitting node 'autofarmer' with light level 11", "input": "", "output": "minetest.register_node('mymod:autofarmer', {\n    description = 'Adds LV-MV-HV Auto Planter and a customizable MV H',\n    tiles = {'default_torch.png'},\n    light_source = 7\n})", "family": "scaffold"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Register a tool called 'mapfix' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:mapfix', {\n    description = 'Fix some map errors (flow and light problems)',\n    inventory_image = 'mapfix.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Register a basic node called 'jail_escape' with description 'Escape the Jail! Don't get caught!'", "input": "", "output": "minetest.register_node('mymod:jail_escape', {\n    description = 'Escape the Jail! Don't get caught!',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Register a tool called 'anti_join' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:anti_join', {\n    description = 'Stops players from joining',\n    inventory_image = 'anti_join.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Register a basic node called 'mesecraft' with description 'The best game for Minetest. A survival game with n'", "input": "", "output": "minetest.register_node('mymod:mesecraft', {\n    description = 'The best game for Minetest. A survival game with n',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Register a basic node called 'advtrains_train' with description 'A tram for Advtrains inspired by the Japanese TLR0'", "input": "", "output": "minetest.register_node('mymod:advtrains_train', {\n    description = 'A tram for Advtrains inspired by the Japanese TLR0',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Register a basic node called 'luablock' with description 'Adds blocks that can execute lua code. Admin purpo'", "input": "", "output": "minetest.register_node('mymod:luablock', {\n    description = 'Adds blocks that can execute lua code. Admin purpo',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Create a light-emitting node 'teacher' with light level 14", "input": "", "output": "minetest.register_node('mymod:teacher', {\n    description = 'Turotial API',\n    tiles = {'default_torch.png'},\n    light_source = 7\n})", "family": "scaffold"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Register a tool called 'db_manager' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:db_manager', {\n    description = 'Database Manager API',\n    inventory_image = 'db_manager.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Register a tool called 'hud_notify' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:hud_notify', {\n    description = 'Shows a message to a player in-game, by means of a',\n    inventory_image = 'hud_notify.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Register a tool called 'chat_history' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:chat_history', {\n    description = 'Interactive chat history viewer with a variety of ',\n    inventory_image = 'chat_history.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Register a basic node called 'redef' with description 'Changes smaller things that are issues for either '", "input": "", "output": "minetest.register_node('mymod:redef', {\n    description = 'Changes smaller things that are issues for either ',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Register a basic node called 'bucket' with description 'Bucket - fork of Minetest Game mod with reduced \"b'", "input": "", "output": "minetest.register_node('mymod:bucket', {\n    description = 'Bucket - fork of Minetest Game mod with reduced \"b',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Create a light-emitting node 'gear_up' with light level 7", "input": "", "output": "minetest.register_node('mymod:gear_up', {\n    description = 'A mod that adds wearable gear and allows re-color ',\n    tiles = {'default_torch.png'},\n    light_source = 14\n})", "family": "scaffold"}
{"instruction": "Register a tool called 'epf' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:epf', {\n    description = 'Adds New Bright Blocks',\n    inventory_image = 'epf.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Register a basic node called 'lucky_block' with description 'Craft and break lucky blocks to give something goo'", "input": "", "output": "minetest.register_node('mymod:lucky_block', {\n    description = 'Craft and break lucky blocks to give something goo',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Register a basic node called 'modname_tooltip' with description 'Modname Tooltip Minecraft mod for MineClone2'", "input": "", "output": "minetest.register_node('mymod:modname_tooltip', {\n    description = 'Modname Tooltip Minecraft mod for MineClone2',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Create a light-emitting node 'flight' with light level 11", "input": "", "output": "minetest.register_node('mymod:flight', {\n    description = 'Adds three different methods of flying, wings, jet',\n    tiles = {'default_torch.png'},\n    light_source = 14\n})", "family": "scaffold"}
{"instruction": "Register a tool called 'xcopper' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:xcopper', {\n    description = 'This mod aims to make copper/bronze more realistic',\n    inventory_image = 'xcopper.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Register a tool called 'inv_inspector' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:inv_inspector', {\n    description = 'Allows you to view the inventory of the players',\n    inventory_image = 'inv_inspector.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Create a light-emitting node 'backroomtest' with light level 14", "input": "", "output": "minetest.register_node('mymod:backroomtest', {\n    description = 'A game about exploring uncanny, vaguely unsettling',\n    tiles = {'default_torch.png'},\n    light_source = 11\n})", "family": "scaffold"}
{"instruction": "Create a light-emitting node 'scriptblocks2' with light level 7", "input": "", "output": "minetest.register_node('mymod:scriptblocks2', {\n    description = 'Adds nodes that can be used to build reusable prog',\n    tiles = {'default_torch.png'},\n    light_source = 11\n})", "family": "scaffold"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Register a basic node called 'no_melterns_no_' with description 'You can't craft tools without melters now. Progres'", "input": "", "output": "minetest.register_node('mymod:no_melterns_no_', {\n    description = 'You can't craft tools without melters now. Progres',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Register a tool called 'mesecons_wirele' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:mesecons_wirele', {\n    description = ' Wireless Mesecons and Digilines ',\n    inventory_image = 'mesecons_wirele.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Register a tool called 'we_undo' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:we_undo', {\n    description = 'Undo and Redo executed WorldEdit chat commands',\n    inventory_image = 'we_undo.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Register a basic node called 'cvl_tools' with description 'Add tools created by YCaTGameRT and farfind for Vo'", "input": "", "output": "minetest.register_node('mymod:cvl_tools', {\n    description = 'Add tools created by YCaTGameRT and farfind for Vo',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Create a light-emitting node 'autorestart' with light level 3", "input": "", "output": "minetest.register_node('mymod:autorestart', {\n    description = 'Automatically restarts the server after a certain ',\n    tiles = {'default_torch.png'},\n    light_source = 14\n})", "family": "scaffold"}
{"instruction": "Register a basic node called 'obdy' with description 'Adds some pretty OP tools :)'", "input": "", "output": "minetest.register_node('mymod:obdy', {\n    description = 'Adds some pretty OP tools :)',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Register a tool called 'savoia_s21' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:savoia_s21', {\n    description = 'Savoia S-21',\n    inventory_image = 'savoia_s21.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Create a light-emitting node 'batch_screwdriv' with light level 7", "input": "", "output": "minetest.register_node('mymod:batch_screwdriv', {\n    description = 'With this you can rotate all nodes in a row at onc',\n    tiles = {'default_torch.png'},\n    light_source = 14\n})", "family": "scaffold"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Register a basic node called 'stoneblocks' with description 'Adds a range of stone blocks and lanterns that lit'", "input": "", "output": "minetest.register_node('mymod:stoneblocks', {\n    description = 'Adds a range of stone blocks and lanterns that lit',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Register a tool called 'zinc' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:zinc', {\n    description = 'Zinc metal, used for making brass',\n    inventory_image = 'zinc.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Create a light-emitting node 'tph_spyglass' with light level 7", "input": "", "output": "minetest.register_node('mymod:tph_spyglass', {\n    description = 'Provides a Spyglass for zooming in and out (if RMB',\n    tiles = {'default_torch.png'},\n    light_source = 14\n})", "family": "scaffold"}
{"instruction": "Register a tool called 'cement' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:cement', {\n    description = 'A craftable and \u201cmakeable\u201c cement blocks for Minet',\n    inventory_image = 'cement.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Register a basic node called 'minegistic' with description 'Build a great rail and logistics empire'", "input": "", "output": "minetest.register_node('mymod:minegistic', {\n    description = 'Build a great rail and logistics empire',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Register a tool called 'dropthecaps' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:dropthecaps', {\n    description = 'Kicks players that spew all-caps messages',\n    inventory_image = 'dropthecaps.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Register a basic node called 'lootchest_modpa' with description 'Modpack adding a lot of various loot containers ac'", "input": "", "output": "minetest.register_node('mymod:lootchest_modpa', {\n    description = 'Modpack adding a lot of various loot containers ac',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Create a light-emitting node 'doors' with light level 3", "input": "", "output": "minetest.register_node('mymod:doors', {\n    description = 'Doors mod with lock tool to open, lock or protect ',\n    tiles = {'default_torch.png'},\n    light_source = 7\n})", "family": "scaffold"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Register a tool called 'troll' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:troll', {\n    description = 'This adds a lot of commands to troll! Its ver WIP',\n    inventory_image = 'troll.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Create a light-emitting node 'rp_analysis_gui' with light level 3", "input": "", "output": "minetest.register_node('mymod:rp_analysis_gui', {\n    description = 'Formspec GUI for rPlace Analysis',\n    tiles = {'default_torch.png'},\n    light_source = 7\n})", "family": "scaffold"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Create a light-emitting node 'rock_piles' with light level 14", "input": "", "output": "minetest.register_node('mymod:rock_piles', {\n    description = 'Adds rock piles which generate randomly on the sur',\n    tiles = {'default_torch.png'},\n    light_source = 14\n})", "family": "scaffold"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Register a tool called 'scifi_nodes' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:scifi_nodes', {\n    description = 'Adds some nodes for building futuristic/sci-fi the',\n    inventory_image = 'scifi_nodes.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Register a tool called 'face_objects' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:face_objects', {\n    description = 'Calculate the facing of objects',\n    inventory_image = 'face_objects.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Register a basic node called 'irc_commands' with description 'Control your server from IRC'", "input": "", "output": "minetest.register_node('mymod:irc_commands', {\n    description = 'Control your server from IRC',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Register a basic node called 'postool' with description 'Adds a HUD to show current ingame time and positio'", "input": "", "output": "minetest.register_node('mymod:postool', {\n    description = 'Adds a HUD to show current ingame time and positio',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Register a tool called 'atl_shears' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:atl_shears', {\n    description = 'This mod adds a pair of shears to easily cut folia',\n    inventory_image = 'atl_shears.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Create a light-emitting node 'magic_compass' with light level 14", "input": "", "output": "minetest.register_node('mymod:magic_compass', {\n    description = 'Teleport system, all inside a compass',\n    tiles = {'default_torch.png'},\n    light_source = 3\n})", "family": "scaffold"}
{"instruction": "Register a tool called 'chat_tools' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:chat_tools', {\n    description = 'chat commands that people might need',\n    inventory_image = 'chat_tools.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Create a light-emitting node 'wc_crystals' with light level 11", "input": "", "output": "minetest.register_node('mymod:wc_crystals', {\n    description = 'Adds various crystal types to Nodecore',\n    tiles = {'default_torch.png'},\n    light_source = 14\n})", "family": "scaffold"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Register a basic node called 'britsignals' with description 'Adds british-inspired signs and signals'", "input": "", "output": "minetest.register_node('mymod:britsignals', {\n    description = 'Adds british-inspired signs and signals',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Register a basic node called 'mymeshnodes' with description 'A machine that makes different shape node'", "input": "", "output": "minetest.register_node('mymod:mymeshnodes', {\n    description = 'A machine that makes different shape node',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Register a basic node called 'random_teleport' with description 'Allows players to teleport to a random location us'", "input": "", "output": "minetest.register_node('mymod:random_teleport', {\n    description = 'Allows players to teleport to a random location us',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Register a basic node called 'place_node' with description 'Add `setblock` and `place` command'", "input": "", "output": "minetest.register_node('mymod:place_node', {\n    description = 'Add `setblock` and `place` command',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Create a light-emitting node 'x_spawners_mobs' with light level 11", "input": "", "output": "minetest.register_node('mymod:x_spawners_mobs', {\n    description = 'Adds mob spawners.',\n    tiles = {'default_torch.png'},\n    light_source = 3\n})", "family": "scaffold"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Create a light-emitting node 'stopwatch' with light level 3", "input": "", "output": "minetest.register_node('mymod:stopwatch', {\n    description = 'Stopwatch is Lua-based benchmarking API for Minete',\n    tiles = {'default_torch.png'},\n    light_source = 14\n})", "family": "scaffold"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Register a tool called 'blueprints' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:blueprints', {\n    description = 'Allows Minetest players to easily copy+paste nodes',\n    inventory_image = 'blueprints.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Register a basic node called 'belfry' with description 'Adds a set of church bells that are chimed automat'", "input": "", "output": "minetest.register_node('mymod:belfry', {\n    description = 'Adds a set of church bells that are chimed automat',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Create a light-emitting node 'xcam' with light level 3", "input": "", "output": "minetest.register_node('mymod:xcam', {\n    description = 'Adds a command to take in-game photos.',\n    tiles = {'default_torch.png'},\n    light_source = 7\n})", "family": "scaffold"}
{"instruction": "Register a basic node called 'challenge' with description 'challenges to create route challenges or to train '", "input": "", "output": "minetest.register_node('mymod:challenge', {\n    description = 'challenges to create route challenges or to train ',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Register a basic node called 'extreme_randomi' with description 'Randomises crafting, mob and block drops.'", "input": "", "output": "minetest.register_node('mymod:extreme_randomi', {\n    description = 'Randomises crafting, mob and block drops.',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Create a light-emitting node 'moretorches' with light level 3", "input": "", "output": "minetest.register_node('mymod:moretorches', {\n    description = 'Adds new types of torches and lamps',\n    tiles = {'default_torch.png'},\n    light_source = 7\n})", "family": "scaffold"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Create a light-emitting node 'drawstruct' with light level 7", "input": "", "output": "minetest.register_node('mymod:drawstruct', {\n    description = 'Draw or generate random structures',\n    tiles = {'default_torch.png'},\n    light_source = 3\n})", "family": "scaffold"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Register a tool called 'lighting_rocket' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:lighting_rocket', {\n    description = 'For temporary lighting large areas',\n    inventory_image = 'lighting_rocket.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Register a tool called 'dlxtrains' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:dlxtrains', {\n    description = 'Additional railway related content for use with Ad',\n    inventory_image = 'dlxtrains.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Create a light-emitting node 'underbed_toilet' with light level 3", "input": "", "output": "minetest.register_node('mymod:underbed_toilet', {\n    description = 'Voxelmanip mapgen with strange layered zone experi',\n    tiles = {'default_torch.png'},\n    light_source = 11\n})", "family": "scaffold"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Register a basic node called 'inv_inspector' with description 'Allows you to view the inventory of the players'", "input": "", "output": "minetest.register_node('mymod:inv_inspector', {\n    description = 'Allows you to view the inventory of the players',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Register a tool called 'labyrinth' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:labyrinth', {\n    description = 'An aMAZEing Game',\n    inventory_image = 'labyrinth.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Register a tool called 'tungsten_carbid' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:tungsten_carbid', {\n    description = 'Adds tools made from tungsten carbide that are mor',\n    inventory_image = 'tungsten_carbid.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Register a tool called 'anti_exploit' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:anti_exploit', {\n    description = 'Protects against exploits',\n    inventory_image = 'anti_exploit.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Register a basic node called 'tfl_s7_stock_ge' with description 'This mod provides generic liveries for use with th'", "input": "", "output": "minetest.register_node('mymod:tfl_s7_stock_ge', {\n    description = 'This mod provides generic liveries for use with th',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Register a tool called 'visual_harm_1nd' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:visual_harm_1nd', {\n    description = 'HP bars for mobs/players',\n    inventory_image = 'visual_harm_1nd.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Register a basic node called 'extreme_randomi' with description 'Randomises crafting, mob and block drops.'", "input": "", "output": "minetest.register_node('mymod:extreme_randomi', {\n    description = 'Randomises crafting, mob and block drops.',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Register a tool called 'stardust' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:stardust', {\n    description = 'A mineral found at high altitude and items made wi',\n    inventory_image = 'stardust.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Create a light-emitting node 'regulus_mtgj202' with light level 3", "input": "", "output": "minetest.register_node('mymod:regulus_mtgj202', {\n    description = 'Darkness has come upon the world. Can you find the',\n    tiles = {'default_torch.png'},\n    light_source = 14\n})", "family": "scaffold"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Register a basic node called 'wc_strata' with description 'Exploring the NodeCore underground has never been '", "input": "", "output": "minetest.register_node('mymod:wc_strata', {\n    description = 'Exploring the NodeCore underground has never been ',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Register a basic node called 'babelfish_redo' with description 'Translate chat messages into other languages'", "input": "", "output": "minetest.register_node('mymod:babelfish_redo', {\n    description = 'Translate chat messages into other languages',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Register a basic node called 'dreambuilder_ga' with description 'Dreambuilder is my attempt to give the player pret'", "input": "", "output": "minetest.register_node('mymod:dreambuilder_ga', {\n    description = 'Dreambuilder is my attempt to give the player pret',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Register a basic node called 'respawn' with description 'Manage respawn points, interesting places, telepor'", "input": "", "output": "minetest.register_node('mymod:respawn', {\n    description = 'Manage respawn points, interesting places, telepor',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Register a basic node called 'auctions' with description 'Adds ingame auctions'", "input": "", "output": "minetest.register_node('mymod:auctions', {\n    description = 'Adds ingame auctions',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Create a light-emitting node 'better_fences' with light level 11", "input": "", "output": "minetest.register_node('mymod:better_fences', {\n    description = 'A Minetest mod which improves the usability of fen',\n    tiles = {'default_torch.png'},\n    light_source = 3\n})", "family": "scaffold"}
{"instruction": "Register a tool called 'darkage' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:darkage', {\n    description = 'DarkAge adds several new nodes and crafts to creat',\n    inventory_image = 'darkage.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Register a tool called 'minetest_game' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:minetest_game', {\n    description = 'The classic \"Minetest\". A lightweight and well-mai',\n    inventory_image = 'minetest_game.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Register a basic node called 'mines' with description 'Regenerating terrain'", "input": "", "output": "minetest.register_node('mymod:mines', {\n    description = 'Regenerating terrain',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Register a basic node called 'bignum' with description 'A library that adds a data type for arbitrary prec'", "input": "", "output": "minetest.register_node('mymod:bignum', {\n    description = 'A library that adds a data type for arbitrary prec',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Register a tool called 'too_many_aliase' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:too_many_aliase', {\n    description = 'Adds aliases to every item/node in MineClone to ma',\n    inventory_image = 'too_many_aliase.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Register a basic node called 'simple_models' with description 'Very simple models.'", "input": "", "output": "minetest.register_node('mymod:simple_models', {\n    description = 'Very simple models.',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Create a light-emitting node 'playertracker' with light level 3", "input": "", "output": "minetest.register_node('mymod:playertracker', {\n    description = 'Mod for any game which logs what users join, and r',\n    tiles = {'default_torch.png'},\n    light_source = 3\n})", "family": "scaffold"}
{"instruction": "Register a tool called 'libox_controlle' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:libox_controlle', {\n    description = 'A fork of mooncontroller made to use libox, also h',\n    inventory_image = 'libox_controlle.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Register a tool called 'morecurves' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:morecurves', {\n    description = 'Adds 10 new curve shapes to game.',\n    inventory_image = 'morecurves.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Register a tool called 'lightdead' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:lightdead', {\n    description = 'Spawns a lightning over the dedposition of a playe',\n    inventory_image = 'lightdead.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Create a light-emitting node 'flying_carpet' with light level 3", "input": "", "output": "minetest.register_node('mymod:flying_carpet', {\n    description = 'Quickly explore the vast terrain with the magical ',\n    tiles = {'default_torch.png'},\n    light_source = 3\n})", "family": "scaffold"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Create a light-emitting node 'mesecar' with light level 7", "input": "", "output": "minetest.register_node('mymod:mesecar', {\n    description = 'Adds 4 styles of microcar: Car55, Nyancart, Meseca',\n    tiles = {'default_torch.png'},\n    light_source = 7\n})", "family": "scaffold"}
{"instruction": "Create a light-emitting node 'toolranks' with light level 7", "input": "", "output": "minetest.register_node('mymod:toolranks', {\n    description = 'Counts the number of nodes a specific tool has dug',\n    tiles = {'default_torch.png'},\n    light_source = 14\n})", "family": "scaffold"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Register a tool called 'wc_fungi' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:wc_fungi', {\n    description = 'Adds various fungi to NodeCore, in all their mycel',\n    inventory_image = 'wc_fungi.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Create a light-emitting node 'survival' with light level 3", "input": "", "output": "minetest.register_node('mymod:survival', {\n    description = 'Adds several survival related items.',\n    tiles = {'default_torch.png'},\n    light_source = 11\n})", "family": "scaffold"}
{"instruction": "Create a light-emitting node 'overpowered' with light level 3", "input": "", "output": "minetest.register_node('mymod:overpowered', {\n    description = 'Adds super overpowered and expensive endgame tools',\n    tiles = {'default_torch.png'},\n    light_source = 3\n})", "family": "scaffold"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Fix the missing tiles field in this node registration", "input": "minetest.register_node('mymod:broken', {\n    description = 'Broken Node'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,4 @@\n minetest.register_node('mymod:broken', {\n     description = 'Broken Node',\n+    tiles = {'default_stone.png'}\n })", "family": "repair"}
{"instruction": "Create a light-emitting node 'infchest' with light level 7", "input": "", "output": "minetest.register_node('mymod:infchest', {\n    description = 'Adds a configurable chest that gives an infinite a',\n    tiles = {'default_torch.png'},\n    light_source = 3\n})", "family": "scaffold"}
{"instruction": "Create a light-emitting node 'feed_buckets' with light level 11", "input": "", "output": "minetest.register_node('mymod:feed_buckets', {\n    description = 'Craftable bucket of feeds which can be used for fe',\n    tiles = {'default_torch.png'},\n    light_source = 11\n})", "family": "scaffold"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Create a light-emitting node 'alien_tools' with light level 14", "input": "", "output": "minetest.register_node('mymod:alien_tools', {\n    description = 'Alien Tools Mod for Minetest - adds Alien Tool, Sh',\n    tiles = {'default_torch.png'},\n    light_source = 7\n})", "family": "scaffold"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Register a basic node called 'real_stamina' with description 'Adds stamina and sprinting (no hunger!)'", "input": "", "output": "minetest.register_node('mymod:real_stamina', {\n    description = 'Adds stamina and sprinting (no hunger!)',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Create a light-emitting node 'adv_lightsabers' with light level 14", "input": "", "output": "minetest.register_node('mymod:adv_lightsabers', {\n    description = 'Relatively Advanced Lightsabers for Minetest Game.',\n    tiles = {'default_torch.png'},\n    light_source = 7\n})", "family": "scaffold"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Implement a node that uses the light_source property from the documentation", "input": "Node definition fields:\n- light_source: integer from 0-14, amount of light emitted\n- tiles: array of texture names\n- description: human readable name", "output": "minetest.register_node('mymod:glowstone', {\n    description = 'Glowing Stone',\n    tiles = {'glowstone.png'},\n    light_source = 9\n})", "family": "doc"}
{"instruction": "Create a light-emitting node 'block_pys' with light level 3", "input": "", "output": "minetest.register_node('mymod:block_pys', {\n    description = ' Add pieces of broken blocks when breaking them.',\n    tiles = {'default_torch.png'},\n    light_source = 14\n})", "family": "scaffold"}
{"instruction": "Create a light-emitting node 'mail' with light level 7", "input": "", "output": "minetest.register_node('mymod:mail', {\n    description = 'Ingame mail-system',\n    tiles = {'default_torch.png'},\n    light_source = 3\n})", "family": "scaffold"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Add the missing light_source field to make this node emit light", "input": "minetest.register_node('mymod:lamp', {\n    description = 'Lamp',\n    tiles = {'default_torch.png'}\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,4 +1,5 @@\n minetest.register_node('mymod:lamp', {\n     description = 'Lamp',\n-    tiles = {'default_torch.png'}\n+    tiles = {'default_torch.png'},\n+    light_source = 11\n })", "family": "repair"}
{"instruction": "Register a basic node called 'craftsystem' with description 'craft registration API which automatically deals w'", "input": "", "output": "minetest.register_node('mymod:craftsystem', {\n    description = 'craft registration API which automatically deals w',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Use this API to create a tool with the specified properties", "input": "minetest.register_tool(name, definition)\n\ntool_capabilities = {\n    full_punch_interval = <number>,\n    max_drop_level = <number>\n}", "output": "minetest.register_tool('mymod:hammer', {\n    description = 'Hammer',\n    inventory_image = 'hammer.png',\n    tool_capabilities = {\n        full_punch_interval = 1.2,\n        max_drop_level = 2\n    }\n})", "family": "doc"}
{"instruction": "Register a tool called 'meshport' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:meshport', {\n    description = 'Easily export areas in Luanti to meshes for 3D ren',\n    inventory_image = 'meshport.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Create a light-emitting node 'speed_boots' with light level 14", "input": "", "output": "minetest.register_node('mymod:speed_boots', {\n    description = 'Adds a new pair of boots called the Boots of Swift',\n    tiles = {'default_torch.png'},\n    light_source = 3\n})", "family": "scaffold"}
{"instruction": "Register a tool called 'equippable_acce' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:equippable_acce', {\n    description = 'adds accessories that you can equip for the looks ',\n    inventory_image = 'equippable_acce.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Create a light-emitting node 'minetest_hardco' with light level 7", "input": "", "output": "minetest.register_node('mymod:minetest_hardco', {\n    description = 'Adds durable building materials that won't break o',\n    tiles = {'default_torch.png'},\n    light_source = 7\n})", "family": "scaffold"}
{"instruction": "Register a tool called 'phonics_lib' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:phonics_lib', {\n    description = 'Provides a library for creating Phonics (Learn how',\n    inventory_image = 'phonics_lib.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
{"instruction": "Using the provided API documentation, write code to register a node", "input": "minetest.register_node(name, definition)\n\nRegisters a node with the given name and definition table.\nRequired fields: description, tiles", "output": "minetest.register_node('mymod:example', {\n    description = 'Example Node',\n    tiles = {'default_dirt.png'}\n})", "family": "doc"}
{"instruction": "Fix the syntax error in this tool registration", "input": "minetest.register_tool('mymod:pick' {\n    description = 'Pickaxe'\n})", "output": "--- a/file.lua\n+++ b/file.lua\n@@ -1,3 +1,3 @@\n-minetest.register_tool('mymod:pick' {\n+minetest.register_tool('mymod:pick', {\n     description = 'Pickaxe'\n })", "family": "repair"}
{"instruction": "Register a basic node called 'livetools' with description 'Craft tools which have a life of their own - they '", "input": "", "output": "minetest.register_node('mymod:livetools', {\n    description = 'Craft tools which have a life of their own - they ',\n    tiles = {'default_stone.png'}\n})", "family": "scaffold"}
{"instruction": "Register a tool called 'resizeme' with specified capabilities", "input": "", "output": "minetest.register_tool('mymod:resizeme', {\n    description = 'Become an Ant or a Giant! Exposes API',\n    inventory_image = 'resizeme.png',\n    tool_capabilities = {\n        full_punch_interval = 1.0,\n        max_drop_level = 1\n    }\n})", "family": "scaffold"}
